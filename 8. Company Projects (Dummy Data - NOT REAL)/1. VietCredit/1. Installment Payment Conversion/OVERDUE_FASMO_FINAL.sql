--1. DIM INFO
DROP TABLE IF EXISTS #DIM_STEP_1;
SELECT FORMAT(APPROVED_AT, 'yyyy-MM') as CONVERTED_MONTH,
COMMITTED_PAYMENT_DATE AS INVOICE_DATE,
DATEADD(DAY, -1, DATEADD(MONTH, 1, COMMITTED_PAYMENT_DATE)) AS END_CYCLE, 
a.OUTSTANDING_PRINCIPAL AS exceed_limit,
A.COMMITTED_PAYMENT_AMOUNT AS COMMITTED_AMOUNT,
b.customer_id,
a.ACCOUNT_NUMBER as ACCOUNT_CARD,
B.open_date AS OPEN_DATE_CARD, 
C.status AS STATUS_CARD,
'' ACCOUNT_FASMO,
APPROVED_AT AS OPEN_DATE_FASMO,
'' STATUS_FASMO,
a.OUTSTANDING_PRINCIPAL AS OS_FASMO,
'' INTEREST_FASMO,
e.aging_bucket as AGING_CARD_APPROVE,
F.NHOMCAONHATTAITCTDKHAC AS APPROVED_CIC,
a.TOTAL_TERM as TOTAL_INSTALLMENT_TERM,
a.TERM as TERM,
A.AMOUNT_PAID AS PAYMENT_AMOUNT_FASMO,
A.PAYMENT_DATE AS PAID_DATE,
d.aging_bucket as CURRENT_AGING_CARD, 
'' CURRENT_AGING_FASMO
INTO #DIM_STEP_1
 FROM ODS_DW_OVERDUE_DEBT_CONVERSION_DIM a
LEFT JOIN ODS_DW_ACCOUNT_DIM b
on a.ACCOUNT_NUMBER = b.account_number
LEFT JOIN BO_ACC_ACCOUNT C
ON A.ACCOUNT_NUMBER = C.account_number
LEFT JOIN ODS_AGING_BUCKET_DAILY_V d -- LẤY AGING CARD HIỆN TẠI
ON A.ACCOUNT_NUMBER = d.account_number AND d.process_dt = (SELECT MAX(process_dt) FROM ODS_AGING_BUCKET_DAILY_V)
LEFT JOIN ODS_AGING_BUCKET_DAILY_V e -- LẤY AGING CARD TẠI NGÀY PHÊ DUYỆT
ON A.ACCOUNT_NUMBER = e.account_number AND e.process_dt = a.APPROVED_AT
LEFT JOIN CIC_R18 F
ON A.account_number = F.account_number AND A.APPROVED_AT BETWEEN F.NGAY_CHECK_CIC AND DATEADD(MONTH, 1, F.NGAY_CHECK_CIC)

--2.  DPD, FULL, ANY PAID
DROP TABLE IF EXISTS #PAYMENT_INVOICE;
SELECT *,
CASE WHEN DATEDIFF(DAY, INVOICE_DATE, PAID_DATE) < 0 THEN NULL ELSE DATEDIFF(DAY, INVOICE_DATE, PAID_DATE)  END AS DPD,
CASE WHEN PAYMENT_AMOUNT_FASMO >= ROUND(COMMITTED_AMOUNT, 0) THEN 1 ELSE 0 END AS FULL_PAID,
CASE WHEN PAYMENT_AMOUNT_FASMO < ROUND(COMMITTED_AMOUNT, 0) AND PAYMENT_AMOUNT_FASMO > 0 THEN 1 ELSE 0 END AS ANY_PAID
INTO #PAYMENT_INVOICE
FROM #DIM_STEP_1

--5.  CONTACT
DROP TABLE IF EXISTS #CALL_INFO;
SELECT A.*, B.ACTION_CODE, B.CHECKED_DATE
INTO #CALL_INFO
FROM #PAYMENT_INVOICE A
LEFT JOIN (SELECT ACCOUNT_NUMBER, ACTION_CODE, CHECKED_DATE
			FROM COLL_DAILY_TOTAL) B
ON A.ACCOUNT_CARD = B.ACCOUNT_NUMBER AND B.CHECKED_DATE BETWEEN A.INVOICE_DATE AND A.END_CYCLE


--6.  PTP
DROP TABLE IF EXISTS #PTP_INFO;
SELECT INVOICE_DATE , ACCOUNT_FASMO, min(CHECKED_DATE) AS 'FIRST_PTP', max(CHECKED_DATE) 'LAST_PTP' 
INTO #PTP_INFO
FROM #CALL_INFO 
WHERE ACTION_CODE LIKE '%PTP%'
GROUP BY INVOICE_DATE, ACCOUNT_FASMO

--PTP INFO 
DROP TABLE IF EXISTS #FULL_INFO_STAGE;
SELECT A.*, C.BOOK AS BOOK_ALLOCATION_TEAM,
CASE WHEN PAYMENT_AMOUNT_FASMO >= COMMITTED_AMOUNT AND PAID_DATE >= LAST_PTP THEN 1 END AS KEEP_PTP
INTO #FULL_INFO_STAGE
 FROM #PAYMENT_INVOICE A
LEFT JOIN #PTP_INFO B
ON A.ACCOUNT_FASMO = B.ACCOUNT_FASMO AND A.INVOICE_DATE= B.INVOICE_DATE
LEFT JOIN ALLOCATION_ALL_TEAM C
ON A.ACCOUNT_CARD = C.ACCOUNT_NUMBER AND C.END_ALLOCATED BETWEEN A.INVOICE_DATE AND A.END_CYCLE

DROP TABLE IF EXISTS #INFO_STEP_1;
SELECT 
CONVERTED_MONTH,
INVOICE_DATE,
END_CYCLE,
TERM,
exceed_limit,
COMMITTED_AMOUNT,
customer_id,
ACCOUNT_CARD,
OPEN_DATE_CARD,
STATUS_CARD,
ACCOUNT_FASMO,
OPEN_DATE_FASMO,
STATUS_FASMO,
OS_FASMO,
INTEREST_FASMO,
AGING_CARD_APPROVE AS AGING_CARD_ARPPROVE,
APPROVED_CIC,
TOTAL_INSTALLMENT_TERM as INSTALLMENT_TERM,
PAYMENT_AMOUNT_FASMO,
PAID_DATE,
CURRENT_AGING_CARD,
CURRENT_AGING_FASMO,
DPD,
FULL_PAID,
ANY_PAID,
BOOK_ALLOCATION_TEAM,
KEEP_PTP,
'' APPROVED_STT_CARD,
'' APPROVED_STT_FASMO
INTO #INFO_STEP_1
FROM #FULL_INFO_STAGE

--  OS_RECOVERY
DROP TABLE IF EXISTS #ALL_PAYMENT_1;
SELECT ACCOUNT_CARD, CURRENT_AGING_CARD,SUM(PAYMENT_AMOUNT_FASMO) AS PAYMENT_AMOUNT_FASMO,
SUM(COMMITTED_AMOUNT) AS OS_FASMO
INTO #ALL_PAYMENT_1
FROM #INFO_STEP_1
GROUP BY ACCOUNT_CARD, CURRENT_AGING_CARD

DROP TABLE IF EXISTS #ALL_PAYMENT;
SELECT ACCOUNT_CARD, OS_FASMO ,SUM(PAYMENT_AMOUNT_FASMO) AS ALL_PAYMENT_FASMO,
SUM(PAYMENT_AMOUNT_FASMO) / nullif(SUM(OS_FASMO), 0) as '%OS_RECOVERY',
CASE WHEN SUM(PAYMENT_AMOUNT_FASMO) / nullif(OS_FASMO, 0) >= 1 AND CURRENT_AGING_CARD = '1a1' THEN 1 ELSE 0 END AS RB
INTO #ALL_PAYMENT
FROM #ALL_PAYMENT_1
GROUP BY ACCOUNT_CARD, OS_FASMO, CURRENT_AGING_CARD


--FULL/ ANY PAID CONVERTED_MONTH
DROP TABLE IF EXISTS #INFO_STEP_2;
SELECT A.*, B.ALL_PAYMENT_FASMO, B.[%OS_RECOVERY], B.RB
INTO #INFO_STEP_2
FROM #INFO_STEP_1 A
LEFT JOIN #ALL_PAYMENT B
ON A.ACCOUNT_CARD = B.ACCOUNT_CARD

-- DPD EVER CONVERTED_MONTH
DROP TABLE IF EXISTS #CONVERTED_MONTH_OVERDUE;
SELECT *,
CASE WHEN B.DPD_EVER >= 1 THEN 1 ELSE 0 END AS DPD_1_EVER,
CASE WHEN B.DPD_EVER >= 10 THEN 1 ELSE 0 END AS DPD_10_EVER,
CASE WHEN B.DPD_EVER >= 30 THEN 1 ELSE 0 END AS DPD_30_EVER
INTO #CONVERTED_MONTH_OVERDUE
FROM (
SELECT DISTINCT CONVERTED_MONTH, A.ACCOUNT_CARD, ACCOUNT_FASMO, 
APPROVED_CIC, AGING_CARD_ARPPROVE AS APPROVE_AGING_CARD,
CURRENT_AGING_CARD, CURRENT_AGING_FASMO,
B.OS_FASMO ,B.ALL_PAYMENT_FASMO, B.[%OS_RECOVERY],
CASE WHEN b.[%OS_RECOVERY] >=1 THEN 1 ELSE 0 END AS 'FULL_PAID',
CASE WHEN ALL_PAYMENT_FASMO > 0 AND b.[%OS_RECOVERY] <1 THEN 1 ELSE 0 END AS 'ANY_PAID'
FROM #INFO_STEP_1 A
LEFT JOIN #ALL_PAYMENT B
ON A.ACCOUNT_CARD = B.ACCOUNT_CARD ) A
LEFT JOIN (SELECT account_number, MAX(day_past_due) AS DPD_EVER FROM ODS_AGING_BUCKET_DAILY_V GROUP BY account_number) B -- LẤY DPD MAX EVER THEO ACC_FASMO
ON a.ACCOUNT_CARD = B.account_number;

 --*** INSERT THEO CONVERTED_MONTH***
 INSERT INTO  FASMO_CONVERTED_MONTH_OVERDUE
 SELECT *, cast(getdate() -1 as date) updated_date
 FROM #CONVERTED_MONTH_OVERDUE;

 --****INSERT THEO INVOICE_MONTH***

  INSERT INTO  DAILY_FASMO_OVERDUE_MONITORING
  SELECT *, cast(getdate() -1 as date) updated_date
 FROM #INFO_STEP_1;

 --TOTAL PTP:
 TRUNCATE TABLE PTP_CDTG_BY_INVOICE_OD;
 INSERT INTO PTP_CDTG_BY_INVOICE_OD
 SELECT DISTINCT FORMAT(INVOICE_DATE, 'yyyy-MM') as INVOICE_MONTH ,COUNT(CONCAT(CHECKED_DATE, ACCOUNT_CARD)) AS PTP_ALL, 'OVERDUE' AS TYPE
 FROM #CALL_INFO
 WHERE ACTION_CODE LIKE '%PTP%'
 GROUP BY FORMAT(INVOICE_DATE, 'yyyy-MM')


  SELECT MAX(updated_date) as CURRENT_UPDATED_DATE FROM DAILY_FASMO_OVERDUE_MONITORING



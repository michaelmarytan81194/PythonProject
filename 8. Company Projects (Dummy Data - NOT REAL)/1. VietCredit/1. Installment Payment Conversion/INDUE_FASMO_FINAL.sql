--1. DIM INFO CARD:
-- 
DROP TABLE IF EXISTS #STEP_0;
SELECT A.customer_id, A.account_number as ACCOUNT_CARD, A.open_date AS OPEN_DATE_CARD, 
A.status AS STATUS_CARD,
B.account_number AS  ACCOUNT_FASMO, B.open_date AS OPEN_DATE_FASMO,
b.status as STATUS_FASMO,
ROUND(CAST(C.overdraft AS float),2) as OS_FASMO, ROUND(CAST(B.interest_rate AS FLOAT),2) AS INTEREST_FASMO,
C.aging_bucket as AGING_CARD_ARPPROVE,
d.NGAY_CHECK_CIC as APPROVED_CIC_DATE,
d.NHOMCAONHATTAITCTDKHAC AS APPROVED_CIC,
CASE WHEN
C.overdraft BETWEEN 2000000 AND 5000000 THEN 3
when
C.overdraft BETWEEN 5000000 AND 10000000 THEN 6
when
C.overdraft BETWEEN 10000000 and 20000000 then 12
when
C.overdraft BETWEEN 20000000 and 30000000 then 18
when
C.overdraft BETWEEN 30000000 and 40000000 then 24
when
C.overdraft BETWEEN 40000000 and 50000000 then 30
when
C.overdraft BETWEEN 50000000 and 100000000 then 36
END AS INSTALLMENT_TERM
INTO #STEP_0
FROM ODS_DW_ACCOUNT_DIM A
LEFT JOIN (SELECT customer_id, account_number, product_id, open_date, status, interest_rate
 FROM ODS_DW_ACCOUNT_DIM 
 WHERE status <> 'ACSTTRAN'
 ) B
 ON A.customer_id = B.customer_id 
 LEFT JOIN ODS_AGING_BUCKET_DAILY_V C 
 ON A.account_number = C.account_number AND C.process_dt = DATEADD(DAY, -1, B.open_date) -- LẤY TRẠNG THÁI TẠI NGÀY PHÊ DUYỆT CỦA ACC THẺ
 LEFT JOIN CIC_R18 D
 ON A.account_number = D.account_number AND b.open_date BETWEEN D.NGAY_CHECK_CIC AND DATEADD(MONTH, 1, D.NGAY_CHECK_CIC)
 WHERE A.account_number IN( select DISTINCT ACCOUNT_NUMBER_CARD from ODS_RPT_INDUE_PRINCIPALDEBTCONVERSION ) AND A.account_number <> B.account_number



--  INVOICE FASMO:
DROP TABLE IF EXISTS #INVOICE_INFO;
SELECT invoice_date, min_amount_due, exceed_limit, account_number, overdue_date
INTO #INVOICE_INFO
FROM BO_INVOICE_ACC_NUMBER
WHERE account_number IN (SELECT ACCOUNT_FASMO FROM #STEP_0)

--  INVOICE_CARD:
DROP TABLE IF EXISTS #INVOICE_CARD;
SELECT max(invoice_date) LASTEST_INVOICE_DATE, account_number, day(invoice_date) as INVOICE_DAY
INTO #INVOICE_CARD
FROM BO_INVOICE_ACC_NUMBER
WHERE account_number IN (SELECT ACCOUNT_CARD FROM #STEP_0)
GROUP BY account_number, day(invoice_date)

--2. INVOICE FASMO
DROP TABLE IF EXISTS #FULL_INVOICE_FASMO;
SELECT 
ROW_NUMBER() OVER (PARTITION BY account_number ORDER BY invoice_date) as TERM,
CASE WHEN DAY(invoice_date) <> LASTEST_INV_DAY_CARD AND DAY(OPEN_DATE_FASMO) < LASTEST_INV_DAY_CARD THEN CONCAT(FORMAT(OPEN_DATE_FASMO, 'yyyy-MM-'), LASTEST_INV_DAY_CARD) 
ELSE invoice_date END AS INVOICE_DATE,
ACCOUNT_FASMO,
exceed_limit,
min_amount_due, 
overdue_date
INTO #FULL_INVOICE_FASMO
FROM #INVOICE_INFO A
LEFT JOIN (
SELECT A.ACCOUNT_FASMO, B.LASTEST_INVOICE_DATE AS LASTEST_INV_CARD, B.INVOICE_DAY AS LASTEST_INV_DAY_CARD, OPEN_DATE_FASMO
FROM #STEP_0 A
LEFT JOIN #INVOICE_CARD B
ON A.ACCOUNT_CARD = B.account_number ) B
ON A.account_number = B.ACCOUNT_FASMO


DROP TABLE IF EXISTS #INFO_INVOICE_TERM; --FULL INVOICE TABLE
SELECT A.INVOICE_DATE, DATEADD(DAY, -1 , DATEADD(MONTH, 1, A.INVOICE_DATE)) END_CYCLE,
A.TERM, A.exceed_limit, 
CASE WHEN a.TERM = 1 and A.min_amount_due = 0 THEN OS_FASMO / INSTALLMENT_TERM ELSE A.min_amount_due END AS COMMITTED_AMOUNT,  -- xét kỳ đầu tiên bị lỗi
B.*
INTO #INFO_INVOICE_TERM
FROM #FULL_INVOICE_FASMO a
LEFT JOIN #STEP_0 B
ON A.ACCOUNT_FASMO = B.ACCOUNT_FASMO


--3. TÍNH PAYMENT:
DROP TABLE IF EXISTS #PAYMENT_FASMO;
select account_number, sum(amount) as PAYMENT_AMOUNT_FASMO, posting_date
INTO #PAYMENT_FASMO
FROM ODS_DW_CARD_LOAN_PAYMENT_FCT 
WHERE merchant_name NOT IN ('ADJUST','HUYBH','KMMTRT','CSC','MGM','MEGASALE','RLPF','RILF','NAPAS','NAPASECOM','writeoff','BOITHUONGBH','CFCADJ', 'MRKMOBIFONE')
OR merchant_name IS NULL AND is_successful_txn = '1' 
GROUP BY account_number, posting_date
having account_number IN (SELECT ACCOUNT_FASMO FROM #FULL_INVOICE_FASMO)

-- LAST_PAYMENT OF INVOICE TERM
DROP TABLE IF EXISTS #PAYMENT_INVOICE_FULL;
SELECT A.INVOICE_DATE, A.END_CYCLE, A.TERM, A.exceed_limit, A.COMMITTED_AMOUNT, A.customer_id, A.ACCOUNT_CARD, A.OPEN_DATE_CARD, A.STATUS_CARD, A.ACCOUNT_FASMO, A.OPEN_DATE_FASMO, A.STATUS_FASMO,
A.OS_FASMO, A.INTEREST_FASMO, A.AGING_CARD_ARPPROVE, A.APPROVED_CIC, A.INSTALLMENT_TERM,
SUM(B.PAYMENT_AMOUNT_FASMO) PAYMENT_AMOUNT_FASMO, MAX(B.posting_date) PAID_DATE 
INTO #PAYMENT_INVOICE_FULL
FROM #INFO_INVOICE_TERM A
LEFT JOIN #PAYMENT_FASMO B
ON A.ACCOUNT_FASMO = B.account_number AND B.posting_date BETWEEN A.INVOICE_DATE AND A.END_CYCLE
GROUP BY A.INVOICE_DATE, A.END_CYCLE, A.TERM, A.exceed_limit, A.COMMITTED_AMOUNT, A.customer_id, A.ACCOUNT_CARD, A.OPEN_DATE_CARD, A.STATUS_CARD, A.ACCOUNT_FASMO, A.OPEN_DATE_FASMO, A.STATUS_FASMO,
A.OS_FASMO, A.INTEREST_FASMO, A.AGING_CARD_ARPPROVE, A.APPROVED_CIC, A.INSTALLMENT_TERM

--4. PAYMENT WITH DPD, ANY_PAID, FULL_PAID
DROP TABLE IF EXISTS #PAYMENT_INVOICE;
SELECT FORMAT(OPEN_DATE_FASMO, 'yyyy-MM') AS 'CONVERTED_MONTH',A.*,
DATEDIFF(DAY, INVOICE_DATE, PAID_DATE) AS DPD,
CASE WHEN PAYMENT_AMOUNT_FASMO >= ROUND(COMMITTED_AMOUNT, 0) THEN 1 ELSE 0 END AS FULL_PAID,
CASE WHEN PAYMENT_AMOUNT_FASMO < ROUND(COMMITTED_AMOUNT, 0) AND PAYMENT_AMOUNT_FASMO > 0 THEN 1 ELSE 0 END AS ANY_PAID
INTO #PAYMENT_INVOICE
FROM #PAYMENT_INVOICE_FULL A


--5. CONTACT INFO
DROP TABLE IF EXISTS #CALL_INFO;
SELECT A.*, B.ACTION_CODE, B.CHECKED_DATE
INTO #CALL_INFO
FROM #PAYMENT_INVOICE A
LEFT JOIN (SELECT ACCOUNT_NUMBER, ACTION_CODE, CHECKED_DATE
			FROM COLL_DAILY_TOTAL) B
ON A.ACCOUNT_CARD = B.ACCOUNT_NUMBER AND B.CHECKED_DATE BETWEEN A.INVOICE_DATE AND A.END_CYCLE


--6. % PTP
DROP TABLE IF EXISTS #PTP_INFO;
SELECT INVOICE_DATE , ACCOUNT_FASMO, min(CHECKED_DATE) AS 'FIRST_PTP', max(CHECKED_DATE) 'LAST_PTP' 
INTO #PTP_INFO
FROM #CALL_INFO 
WHERE ACTION_CODE LIKE '%PTP%'
GROUP BY INVOICE_DATE, ACCOUNT_FASMO

--INFO PTP
DROP TABLE IF EXISTS #FULL_INFO_STAGE;
SELECT A.*, C.BOOK AS BOOK_ALLOCATION_TEAM,
CASE WHEN PAYMENT_AMOUNT_FASMO >= COMMITTED_AMOUNT AND PAID_DATE >= LAST_PTP THEN 1 END AS KEEP_PTP
INTO #FULL_INFO_STAGE
 FROM #PAYMENT_INVOICE A
LEFT JOIN #PTP_INFO B
ON A.ACCOUNT_FASMO = B.ACCOUNT_FASMO AND A.INVOICE_DATE= B.INVOICE_DATE
LEFT JOIN ALLOCATION_ALL_TEAM C
ON A.ACCOUNT_CARD = C.ACCOUNT_NUMBER AND C.ALLOCATED_DATE BETWEEN A.INVOICE_DATE AND A.END_CYCLE


--INSERT INTO DAILY_FASMO_INDUE_MONITORING
DROP TABLE IF EXISTS #FINAL_STEP_1;
SELECT 
CASE WHEN b.CONVERTED_MONTH IS NULL THEN FORMAT(a.OPEN_DATE_FASMO, 'yyyy-MM') ELSE b.CONVERTED_MONTH END AS CONVERTED_MONTH,
b.INVOICE_DATE,
b.END_CYCLE,
b.TERM,
b.exceed_limit,
b.COMMITTED_AMOUNT,
CASE WHEN b.customer_id IS NULL THEN A.customer_id ELSE B.customer_id END AS customer_id ,
CASE WHEN b.ACCOUNT_CARD IS NULL THEN A.ACCOUNT_CARD ELSE b.ACCOUNT_CARD END AS ACCOUNT_CARD,
CASE WHEN b.OPEN_DATE_CARD IS NULL THEN a.OPEN_DATE_CARD ELSE b.OPEN_DATE_CARD END AS OPEN_DATE_CARD,
CASE WHEN b.STATUS_CARD IS NULL THEN a.STATUS_CARD ELSE b.STATUS_CARD END AS STATUS_CARD,
CASE WHEN b.ACCOUNT_FASMO IS NULL THEN a.ACCOUNT_FASMO ELSE b.ACCOUNT_FASMO END AS ACCOUNT_FASMO,
CASE WHEN b.OPEN_DATE_FASMO IS NULL THEN a.OPEN_DATE_FASMO ELSE b.OPEN_DATE_FASMO END AS OPEN_DATE_FASMO,
CASE WHEN b.STATUS_FASMO IS NULL THEN a.STATUS_FASMO ELSE b.STATUS_FASMO END AS STATUS_FASMO,
CASE WHEN b.OS_FASMO IS NULL THEN a.OS_FASMO ELSE b.OS_FASMO END AS OS_FASMO,
CASE WHEN b.INTEREST_FASMO IS NULL THEN a.INTEREST_FASMO ELSE b.INTEREST_FASMO END AS INTEREST_FASMO,
CASE WHEN b.AGING_CARD_ARPPROVE IS NULL THEN a.AGING_CARD_ARPPROVE ELSE b.AGING_CARD_ARPPROVE END AS AGING_CARD_ARPPROVE,
CASE WHEN b.APPROVED_CIC IS NULL THEN a.APPROVED_CIC ELSE b.APPROVED_CIC END AS APPROVED_CIC,
CASE WHEN b.INSTALLMENT_TERM IS NULL THEN a.INSTALLMENT_TERM ELSE b.INSTALLMENT_TERM END AS INSTALLMENT_TERM,
b.PAYMENT_AMOUNT_FASMO,
b.PAID_DATE,
D.aging_bucket AS CURRENT_AGING_CARD,
E.aging_bucket AS CURRENT_AGING_FASMO,
b.DPD,
b.FULL_PAID,
b.ANY_PAID,
b.BOOK_ALLOCATION_TEAM,
b.KEEP_PTP,
'ACSTTRAN'APPROVED_STT_CARD,
'ACSTACTV' APPROVED_STT_FASMO,
CASE WHEN DPD >= 1 THEN 1 ELSE 0 END AS 'DPD_1_INV',
CASE WHEN DPD >= 5 THEN 1 ELSE 0 END AS 'DPD_5_INV',
CASE WHEN DPD >= 10 THEN 1 ELSE 0 END AS 'DPD_10_INV',
CASE WHEN DPD >= 30 THEN 1 ELSE 0 END AS 'DPD_30_INV'
INTO #FINAL_STEP_1
FROM #STEP_0 A 
LEFT JOIN (
SELECT *, 
'ACSTTRAN' as APPROVED_STT_CARD,
'ACSTACTV' as APPROVED_STT_FASMO,
cast(GETDATE() -1 as date) as updated_date 
FROM #FULL_INFO_STAGE) B
ON A.ACCOUNT_CARD = B.ACCOUNT_CARD
LEFT JOIN #INVOICE_CARD C
ON A.ACCOUNT_CARD = C.account_number
LEFT JOIN ODS_AGING_BUCKET_DAILY_V D -- LẤY AGING CARD HIỆN TẠI
ON A.ACCOUNT_CARD = D.account_number AND D.process_dt = (SELECT MAX(process_dt) FROM ODS_AGING_BUCKET_DAILY_V)
LEFT JOIN ODS_AGING_BUCKET_DAILY_V E -- LẤY AGING_FASMO HIỆN TẠI
ON A.ACCOUNT_FASMO = E.account_number AND E.process_dt = (SELECT MAX(process_dt) FROM ODS_AGING_BUCKET_DAILY_V)

DROP TABLE IF EXISTS #FINAL_STEP;
SELECT CONVERTED_MONTH,
INVOICE_DATE,
END_CYCLE,
TERM,
exceed_limit,
COMMITTED_AMOUNT,
customer_id,
ACCOUNT_CARD,
OPEN_DATE_CARD,
STATUS_CARD,
ACCOUNT_FASMO,
OPEN_DATE_FASMO,
STATUS_FASMO,
OS_FASMO,
INTEREST_FASMO,
AGING_CARD_ARPPROVE,
APPROVED_CIC,
INSTALLMENT_TERM,
PAYMENT_AMOUNT_FASMO,
PAID_DATE,
CURRENT_AGING_CARD,
CURRENT_AGING_FASMO,
DPD,
FULL_PAID,
ANY_PAID,
BOOK_ALLOCATION_TEAM,
KEEP_PTP,
APPROVED_STT_CARD,
APPROVED_STT_FASMO,
updated_date
INTO #FINAL_STEP
   FROM
   (
   SELECT *, cast(getdate() -1 as date) updated_date,
   ROW_NUMBER() OVER (PARTITION BY INVOICE_DATE, ACCOUNT_CARD ORDER BY BOOK_ALLOCATION_TEAM DESC) AS CHECK_ROW
   FROM #FINAL_STEP_1) A
   WHERE CHECK_ROW = 1

-- TÍNH OS_RECOVERY
DROP TABLE IF EXISTS #ALL_PAYMENT;
SELECT ACCOUNT_CARD, OS_FASMO ,SUM(PAYMENT_AMOUNT_FASMO) AS ALL_PAYMENT_FASMO,
SUM(PAYMENT_AMOUNT_FASMO) / nullif(OS_FASMO, 0) as '%OS_RECOVERY',
CASE WHEN SUM(PAYMENT_AMOUNT_FASMO) / nullif(OS_FASMO, 0) >= 1 AND CURRENT_AGING_CARD = '1a1' THEN 1 ELSE 0 END AS RB
INTO #ALL_PAYMENT
FROM  #FINAL_STEP 
GROUP BY ACCOUNT_CARD, OS_FASMO, CURRENT_AGING_CARD

--FULL AND ANY PAID OF CONVERTED_MONTH
DROP TABLE IF EXISTS #INFO_STEP_2;
SELECT A.*, B.ALL_PAYMENT_FASMO, B.[%OS_RECOVERY], B.RB
INTO #INFO_STEP_2
FROM #FINAL_STEP A
LEFT JOIN #ALL_PAYMENT B
ON A.ACCOUNT_CARD = B.ACCOUNT_CARD

-- DPD EVER CONVERTED_MONTH
DROP TABLE IF EXISTS #CONVERTED_MONTH_INDUE;
SELECT *,
CASE WHEN B.DPD_EVER >= 1 THEN 1 ELSE 0 END AS DPD_1_EVER,
CASE WHEN B.DPD_EVER >= 10 THEN 1 ELSE 0 END AS DPD_10_EVER,
CASE WHEN B.DPD_EVER >= 30 THEN 1 ELSE 0 END AS DPD_30_EVER
INTO #CONVERTED_MONTH_INDUE
FROM (
SELECT DISTINCT CONVERTED_MONTH, A.ACCOUNT_CARD, ACCOUNT_FASMO, 
APPROVED_CIC, AGING_CARD_ARPPROVE AS APPROVE_AGING_CARD,
CURRENT_AGING_CARD, CURRENT_AGING_FASMO,
B.OS_FASMO ,B.ALL_PAYMENT_FASMO, B.[%OS_RECOVERY],
CASE WHEN b.[%OS_RECOVERY] >=1 THEN 1 ELSE 0 END AS 'FULL_PAID',
CASE WHEN ALL_PAYMENT_FASMO > 0 AND b.[%OS_RECOVERY] <1 THEN 1 ELSE 0 END AS 'ANY_PAID'
FROM #FINAL_STEP A
LEFT JOIN #ALL_PAYMENT B
ON A.ACCOUNT_CARD = B.ACCOUNT_CARD ) A
LEFT JOIN (SELECT account_number, MAX(day_past_due) AS DPD_EVER FROM ODS_AGING_BUCKET_DAILY_V GROUP BY account_number) B -- LẤY DPD MAX EVER THEO ACC_FASMO
ON a.ACCOUNT_FASMO = B.account_number

 -- ****INSERT THEO CONVERTED_MONTH****

 INSERT INTO FASMO_CONVERTED_MONTH_INDUE
 SELECT *, cast(getdate() -1 as date) updated_date
 --INTO FASMO_CONVERTED_MONTH_INDUE
 FROM #CONVERTED_MONTH_INDUE

  -- ****INSERT THEO INVOICE_MONTH****
  INSERT INTO  DAILY_FASMO_INDUE_MONITORING
  SELECT *
  --INTO  DAILY_FASMO_INDUE_MONITORING
  FROM #FINAL_STEP

  -- TOTAL CASE PTP
 TRUNCATE TABLE PTP_CDTG_BY_INVOICE_ID;
 INSERT INTO PTP_CDTG_BY_INVOICE_ID
 SELECT DISTINCT FORMAT(INVOICE_DATE, 'yyyy-MM') as INVOICE_MONTH ,COUNT(CONCAT(CHECKED_DATE, ACCOUNT_CARD)) AS PTP_ALL, 'INDUE' AS TYPE
 FROM #CALL_INFO
 WHERE ACTION_CODE LIKE '%PTP%'
 GROUP BY FORMAT(INVOICE_DATE, 'yyyy-MM')

 SELECT MAX(invoice_date) as CURRENT_INVOICE_DATE_INDUE FROM DAILY_FASMO_INDUE_MONITORING

